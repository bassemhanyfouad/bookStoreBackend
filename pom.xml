<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.check24.codingchallenge</groupId>
    <artifactId>bookstore</artifactId>
    <version>0-0-1</version>
    <packaging>jar</packaging>

    <name>bookstore</name>
    <description>bookstore service</description>

    <properties>
        <spring.boot.version>2.1.3.RELEASE</spring.boot.version>
        <java.version>1.8</java.version>
        <!-- default profile is local with flyway -->
        <spring.profiles>flyway,local</spring.profiles>
        <mavenSurefire.argLine>
            <!-- this activates the jacoco agent in tests -->
            ${jacoco.coverageAgent}
            -Djava.io.tmpdir=${project.build.directory}
            -Dfile.encoding=${project.build.sourceEncoding}
            <!-- we limit the stack size because the tests spawn a lot of thread which results in OOM-->
            -Xss256k -Xmx256m -XX:MaxMetaspaceSize=256m -XX:MaxDirectMemorySize=128m
            -XX:+HeapDumpOnOutOfMemoryError
        </mavenSurefire.argLine>
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.jacoco.reportPaths>${project.basedir}/target/jacoco.exec</sonar.jacoco.reportPaths>
        <sonar-jacoco-listeners.version>5.1.1.13214</sonar-jacoco-listeners.version>
        <spring.cloud.version>1.0.0.RELEASE</spring.cloud.version>
        <docker.image.prefix>bookstore</docker.image.prefix>
    </properties>
    <!-- argline -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>org.sonarsource.java</groupId>
                <artifactId>sonar-jacoco-listeners</artifactId>
                <version>${sonar-jacoco-listeners.version}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.8.0</version>
        </dependency>
        <dependency>
            <groupId>org.modelmapper</groupId>
            <artifactId>modelmapper</artifactId>
            <version>2.1.0</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>5.2.1</version>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>postgresql</artifactId>
            <version>1.11.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <version>5.1.4</version>
            </plugin>
            <!-- we need to prepare the agent before tests are run -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <propertyName>jacoco.coverageAgent</propertyName>
                            <!-- this merges all coverage reports in one file -->
                            <destFile>${sonar.jacoco.reportPaths}</destFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- For unit testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkCount>3</forkCount>
                    <reuseForks>true</reuseForks>
                    <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>
                </configuration>
            </plugin>
            <!-- For integration testing -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <argLine>
                        <!-- this activates the jacoco agent in tests -->
                        ${jacoco.coverageAgent}
                        -Xss256k -Xmx512m -XX:MaxMetaspaceSize=256m -XX:MaxDirectMemorySize=128m
                        -XX:+HeapDumpOnOutOfMemoryError
                    </argLine>
                    <!-- This is needed so that sonar picks up the results from integration tests -->
                    <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
<!--                    <properties>-->
<!--                        <property>-->
<!--                            <name>listener</name>-->
<!--                            <value>org.sonar.java.jacoco.JUnitListener</value>-->
<!--                        </property>-->
<!--                    </properties>-->
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.sonarsource.java</groupId>
                        <artifactId>sonar-jacoco-listeners</artifactId>
                        <version>${sonar-jacoco-listeners.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
<!--                <plugin>-->
<!--                    <groupId>com.spotify</groupId>-->
<!--                    <artifactId>dockerfile-maven-plugin</artifactId>-->
<!--                    <version>1.4.9</version>-->
<!--                    <configuration>-->
<!--                        <repository>${docker.image.prefix}/${project.artifactId}</repository>-->
<!--                    </configuration>-->
<!--                </plugin>-->
            </plugins>
    </build>
</project>
